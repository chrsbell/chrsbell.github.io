[{"categories":["Chip-8"],"content":" Emulating in Python! Note: I am by no means an expert or fluent with Python, and prior to this project I hadn’t used it since taking a computer science class many years ago. Before starting my immersive at Hack Reactor, I decided to try and build an emulator! I got the idea for the project from this large collection of project ideas, and while GameBoy was a tempting prospect to emulate I quickly realized how much time it would take to complete one. So I went with the much simpler Chip-8. ","date":"2020-11-10","objectID":"/2020/11/designing-a-chip8-emulator-in-python/:0:0","tags":["python","emulator","chip-8"],"title":"Designing a Chip-8 Emulator in Python","uri":"/2020/11/designing-a-chip8-emulator-in-python/"},{"categories":["Chip-8"],"content":"Project Phases ","date":"2020-11-10","objectID":"/2020/11/designing-a-chip8-emulator-in-python/:1:0","tags":["python","emulator","chip-8"],"title":"Designing a Chip-8 Emulator in Python","uri":"/2020/11/designing-a-chip8-emulator-in-python/"},{"categories":["Chip-8"],"content":"Rendering Graphics This was my first time really diving into how emulation worked, and doing it in a relatively new language for me was also a challenge. I spent a few days refreshing my knowledge of Python by watching tutorial videos and once I felt that I had the essential fundamentals down, I started by writing a rendering class. I’d done a lot of OpenGL based rendering in high school so I decided to go with what I was familiar with and write a simple class which could toggle virtual ‘pixels’ on the screen. The Chip-8 language uses a 64x32 monochrome display, so I mapped each corresponding section of the emulator window to a pixel. Since I was using Modern OpenGL (i.e. shaders and vertex buffer objects), I was able to access and toggle each pixel as needed by obtaining an offset into the virtual screen’s color VBO and then writing either ‘0’ or ‘1’ with glBufferSubData to represent that pixel’s state. I decided to keep it simple by representing each virtual pixel as a set of 4 vertices and rendering the data as GL_QUADS, but further optimization using GL_TRIANGLES or GL_TRIANGLE_STRIP could significantly reduce the vertex count. The set pixel function ","date":"2020-11-10","objectID":"/2020/11/designing-a-chip8-emulator-in-python/:1:1","tags":["python","emulator","chip-8"],"title":"Designing a Chip-8 Emulator in Python","uri":"/2020/11/designing-a-chip8-emulator-in-python/"},{"categories":["Chip-8"],"content":"Interpreting Instructions After having a solid rendering class, I jumped straight into writing the Chip-8 interpreter. Taken straight from Cowgod’s Chip-8 technical reference, the structure of the Chip-8’s RAM should look like this: The RAM structure of the Chip-8 interpreter +---------------+= 0xFFF (4095) End of Chip-8 RAM | | | | | | | | | | | 0x200 to 0xFFF| | Chip-8 | | Program / Data| | Space | | | | | | | +- - - - - - - -+= 0x600 (1536) Start of ETI 660 Chip-8 programs | | | | | | +---------------+= 0x200 (512) Start of most Chip-8 programs | 0x000 to 0x1FF| | Reserved for | | interpreter | +---------------+= 0x000 (0) Start of Chip-8 RAM Each Chip-8 instruction is 2-bytes long, however, so to successfully load a ROM I had to cut each opcode in half and insert it into the emulator’s memory starting at 0x200 that way. The opcode loading function Next I had to figure out a way to map each of the 36 opcodes to a corresponding function. This turned out to be challenging in that different instructions contain variables in their names to represent targeted bits of the instruction. For example, one instruction might be 8FA0 and need to be mapped to 8xy0, where x represents the lowest 4 bits of the upper half of the opcode and y represents the upper 4 bits of the lower half of the opcode. Creating a hashing function which worked for all 36 opcodes took a good while to figure out, but once I had it working I was able to simply write out all of the necessary opcode functions. Mapping each opcode to a function for easy instruction lookup The most difficult instruction to write was definitely Dxyn or the draw instruction. Chip-8 represents sprites, or pictures, as bytes of data such that an individual bit corresponds to a pixel on the virtual screen. Rendering these sprites involves performing bitwise logic on the screen itself as well as checking for sprite collisions and setting the appropriate bit. The remainder instructions were mostly math and performing bitwise logic, so they were fairly straightforward. The instructions handling subroutines were a bit confusing for me at first, but I’d say they really solidified my understanding of how a simple call stack works. ","date":"2020-11-10","objectID":"/2020/11/designing-a-chip8-emulator-in-python/:1:2","tags":["python","emulator","chip-8"],"title":"Designing a Chip-8 Emulator in Python","uri":"/2020/11/designing-a-chip8-emulator-in-python/"},{"categories":["Chip-8"],"content":"Timing The first iteration of my emulator was…super slow. Even when I increased my FPS limiter to 240, I found every game to be unplayable. I spent more time than I’d like to admit troubleshooting this problem, but it turned out the way I coupled interpreter logic with rendering was not viable at all. I solved the issue by adding a num_cycles variable to my interpreter to adjust the number of instructions executed before re-rendering the window. The fix to my playability issues Another challenge I faced was generating audio of a variable length for the sound timer opcode. While I could have used an audio file and stopped/started playing it as necessary, I decided to use the https://pypi.org/project/simpleaudio/ library with NumPy to generate and play square waves of variable length. This is the whole class ","date":"2020-11-10","objectID":"/2020/11/designing-a-chip8-emulator-in-python/:1:3","tags":["python","emulator","chip-8"],"title":"Designing a Chip-8 Emulator in Python","uri":"/2020/11/designing-a-chip8-emulator-in-python/"},{"categories":["Chip-8"],"content":"Closing Comments There are some other features I touched on while working on the emulator that I didn’t fully implement, such as remappable keyboard input and saving/loading ROM states. All in all this was an incredibly fun mini project and I would love to tackle Game Boy emulation sometime, preferably in JavaScript! Finally, here is a quick demo video: The full source is available here! ","date":"2020-11-10","objectID":"/2020/11/designing-a-chip8-emulator-in-python/:1:4","tags":["python","emulator","chip-8"],"title":"Designing a Chip-8 Emulator in Python","uri":"/2020/11/designing-a-chip8-emulator-in-python/"},{"categories":["Hack Reactor"],"content":" Yep I jumped on the bootcamp train during one of the strangest times to do so. In mid June, I was browsing reddit and came across an ad promising (not really) a six-figure salary in return for 12 weeks of coding and about 20k. As my site header says, I love to build and have been feeling a burning desire for a career switch for a while now. A couple of months and the cost of multiple kidneys later, I moved from coast to coast to a new city where I know no one to embark on a journey that may or may not pan out. Kinda crazy. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week12/:0:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week12/"},{"categories":["Hack Reactor"],"content":"Is it fun? Uhhh sometimes it is, sometimes it isn’t. I can’t really say that everything’s been going well the whole time. There have been plenty of frustrating moments. It’s a ton of work, studying, being forced to face all of my insecurities as well as learning how to live independently and managing self-care while knowing no one in a brand new city. Yes I have cried multiple times. It’s incredibly difficult, and while I heard from multiple alumni that it was going to be extremely hard it’s another thing to actually be in the situation. I truly wanted something difficult when I signed up for this and got way more than I bargained for. One prime example: almost everyday there is a student presentation but if no one signs up to present, a wheel of death is brought out and a random student is chosen to do an ad hoc presentation or AMA. It landed on me for my birthday (true story) and the experience was…quite brutal for me. The times it has been enjoyable have definitely been illuminating for me, though, and I feel like I’ve already gained so much personal insight. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week12/:1:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week12/"},{"categories":["Hack Reactor"],"content":"Am I learning? Hard to say when the floodgates to new material hell open every 2 days. But I made it this so far so I guess I am? My personal experience so far is that there is a bare minimum of material you need to know to do well on the self-assessments each Saturday which is already very stressful to reach, and anything beyond that is what you make of it. If you’re like me, of course you want to try and reach the advanced material or at least complete the bare minimum requirements (gl with that) for each sprint and it sucks when you fall short of your expectations because you get burned out or for some other reason. No matter how smart you think you are there will be an endless amount of material and challenges for you to face, so don’t worry about that part if you feel like you’re already good at coding. It’s definitely humbling to feel like you’re decent at coding before starting and then realizing that you’ve been doing a ton of bad practices the whole time. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week12/:2:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week12/"},{"categories":["Hack Reactor"],"content":"Any tips or advice? General things that would’ve applied to me before starting: Try to know your weaknesses before starting and work on them throughout the immersive. HR will just amplify everything you’re insecure about so it really is a great opportunity to better yourself. Study hard and efficiently, but also don’t let yourself become burned out or sidetracked. Get to know everyone in your cohort! Join those zoom study calls and practice being vulnerable because everyone’s success is your success (Big area of improvement for me). ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week12/:3:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week12/"},{"categories":["Hack Reactor"],"content":"What’s next? The pair programming phase of HR just ended yesterday, so next week we will be building a ‘mini app’ independently. Then the Monday after that is the infamous TAA, which if you pass you continue to do a Front-End capstone project and move on to the senior phase of the program. Every week up to the last one has progressively gotten more difficult and filled with more rabbit holes so I’m expecting more pain, but hopefully more great moments too if I can pass the TAA. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week12/:4:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week12/"},{"categories":["Hack Reactor"],"content":" Almost at the finish line! Wow, it’s alright week 9. As my site header says, I love to build and have been feeling a burning desire for a career switch for a while now. A couple of months and the cost of multiple kidneys later, I moved from coast to coast to a new city where I know no one to embark on a journey that may or may not pan out. Kinda crazy. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week4/:0:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week4/"},{"categories":["Hack Reactor"],"content":"Is it fun? Uhhh sometimes it is, sometimes it isn’t. I can’t really say that everything’s been going well the whole time. There have been plenty of frustrating moments. It’s a ton of work, studying, being forced to face all of my insecurities as well as learning how to live independently and managing self-care while knowing no one in a brand new city. Yes I have cried multiple times. It’s incredibly difficult, and while I heard from multiple alumni that it was going to be extremely hard it’s another thing to actually be in the situation. I truly wanted something difficult when I signed up for this and got way more than I bargained for. One prime example: almost everyday there is a student presentation but if no one signs up to present, a wheel of death is brought out and a random student is chosen to do an ad hoc presentation or AMA. It landed on me for my birthday (true story) and the experience was…quite brutal for me. The times it has been enjoyable have definitely been illuminating for me, though, and I feel like I’ve already gained so much personal insight. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week4/:1:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week4/"},{"categories":["Hack Reactor"],"content":"Am I learning? Hard to say when the floodgates to new material hell open every 2 days. But I made it this so far so I guess I am? My personal experience so far is that there is a bare minimum of material you need to know to do well on the self-assessments each Saturday which is already very stressful to reach, and anything beyond that is what you make of it. If you’re like me, of course you want to try and reach the advanced material or at least complete the bare minimum requirements (gl with that) for each sprint and it sucks when you fall short of your expectations because you get burned out or for some other reason. No matter how smart you think you are there will be an endless amount of material and challenges for you to face, so don’t worry about that part if you feel like you’re already good at coding. It’s definitely humbling to feel like you’re decent at coding before starting and then realizing that you’ve been doing a ton of bad practices the whole time. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week4/:2:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week4/"},{"categories":["Hack Reactor"],"content":"Any tips or advice? General things that would’ve applied to me before starting: Try to know your weaknesses before starting and work on them throughout the immersive. HR will just amplify everything you’re insecure about so it really is a great opportunity to better yourself. Study hard and efficiently, but also don’t let yourself become burned out or sidetracked. Get to know everyone in your cohort! Join those zoom study calls and practice being vulnerable because everyone’s success is your success (Big area of improvement for me). ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week4/:3:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week4/"},{"categories":["Hack Reactor"],"content":"What’s next? The pair programming phase of HR just ended yesterday, so next week we will be building a ‘mini app’ independently. Then the Monday after that is the infamous TAA, which if you pass you continue to do a Front-End capstone project and move on to the senior phase of the program. Every week up to the last one has progressively gotten more difficult and filled with more rabbit holes so I’m expecting more pain, but hopefully more great moments too if I can pass the TAA. ","date":"2020-09-13","objectID":"/2020/09/hack-reactor-week4/:4:0","tags":["hack-reactor","bootcamp","pair-programming"],"title":"My Hack Reactor Experience up to Week 4","uri":"/2020/09/hack-reactor-week4/"},{"categories":["Serial Keyboard"],"content":" Excited to try and get back into blogging! This will be the first post in a hopefully not super long series documenting my progress in building a very special mini keyboard. ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:0:0","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"About What is this? A three key keyboard, just like the one you use to type. The primary goal of this keyboard is to achieve the lowest input latency I possibly can using standard Cherry MX switches. Why only three keys? I personally only need 2-3 keys to make good use of this keyboard in the rhythm game I play, osu! It should be possible to scale the design up to a full size keyboard, but would take longer and cost much more. This serial keyboard project was based off of work I did last year on a very similar project. The major difference is that this keyboard communicates with the PC, or host, using RS232. My previous project used PS/2; if you are interested, a great resource for the PS/2 protocol is available here. ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:1:0","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Circuitry My first step in designing the circuit for my keyboard was to pick a CAD program. There are many free and commercial programs available for this purpose, but the ones I’m most familiar with are KiCAD and EAGLE. KiCAD has great support for hierarchical sheets and it’s free so I went with that. At first, I designed the circuit without using hierarchical sheets but later added them since I had extra time. Here are some before and after pics of the full circuit! Designing the circuit without hierarchical sheets The completed circuit, using hierarchical sheets for sub circuits There were a few new features I wanted to include in my serial mini keyboard which required me make good use of Google. The biggest feature I wanted to add was bootloader support. What's a bootloader? Basically, a bootloader is an onchip program that handles loading a target application. This allows convenient firmware updates over USB, as the bootloader can communicate with a PC host application to change the on-keyboard firmware. The microprocessor I chose for my keyboard, a 16-bit dsPIC, was a mostly arbitrary pick…I had many leftover from my previous projects. The main thing to note is that this microprocessor includes 3 on-chip UARTs. These are devices used for serial communication, the whole purpose of the serial keyboard. I decided to use one on-chip UART device to communicate with the PC for firmware updates, and another UART to send keystrokes. ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:0","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"USB-to-UART To receive and send USB data for keyboard firmware updates, I used the FT230XQ USB-to-UART IC. The finished circuit for USB communication was pretty straightforward, I just used the suggested circuit from the datasheet with an added LED status indicator and additional ESD protection. The completed USB-UART circuit ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:1","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"RGB Backlighting The next new feature I attempted to implement was adjustable RGB backlighting. The first step in designing this circuit was to refresh my understanding of transistors. It took a bit of time, but I ended up using IRLML2060 N-MOSFETs for each color. This transistor is operable with TTL logic levels and has a short enough time delay to drive the LEDs with PWM. I added two potentiometers as well; one to control the hue of the LEDs, and one to control the brightness. I had a tough time deciding on LEDs but ended up using these fairly bright ones. The completed backlighting circuit ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:2","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"RS232 Converter While the on-chip UART devices allow for easy serial communication between TTL logic levels (typically around 3.3V), serial communication with a PC’s serial port requires voltage levels which swing from ~$\\pm$12V. The famous MAX232 IC takes care of this conversion, and I once again used the preexisting example circuit with no modifications needed. The RS232 conversion circuit ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:3","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Debouncing This circuit is responsible for attempting to reduce the largest source of keyboard latency for Cherry MX switches, switch bouncing. On debouncing: “When the contacts of any mechanical switch bang together they rebound a bit before settling, causing bounce. Debouncing, of course, is the process of removing the bounces, of converting the brutish realities of the analog world into pristine ones and zeros. Both hardware and software solutions exist, though by far the most common are those done in a snippet of code.” Jack Ganssle My goal with this circuit was to use hysteresis to reduce/eliminate logic changes due to switch bouncing. My previous project attempted to use hysteresis, but was flawed because of incorrect RC values and an incorrect hysteresis circuit. The updated circuit should behave as expected although I have yet to test it, and it was mostly taken from this simple hysteresis circuit. I adjusted the debounce time here to 0.1 ms versus the recommended 5 ms time for Cherry switches…we’ll see how that goes. The circuit responsible for the bulk of debouncing ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:4","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Power and Oscillator These circuits are pretty unexciting and take care of the basics of providing 3.3V to the ICs and 100MHz to the microcontroller. After playing around with MPLAB Code Configurator, however, I think I might have misinterpreted how the microcontroller should be run at 100MHz. My initial assumption was that the microcontroller would play fine with a 100MHz external clock, but as shown in the below picture the max frequency for an external clock is 64MHz. The apparent solution to this would be to use a clock source with a PLL; an example is show in the second figure using the internal FRC clock. So I will probably need to use the internal FRC clock for this one. The maximum external clock frequency... FRC with PLL can provide the expected 100MHz ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:5","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Complete PCB So here is the completed PCB! I skipped a few steps to get to this point, but hopefully in another post I can talk about the obstacles and decisions I made while designing the PCB. Top of PCB Bottom of PCB ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:6","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"}]