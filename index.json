[{"categories":["Serial Keyboard"],"content":" Excited to try and get back into blogging! This will be the first post in a hopefully not super long series documenting my progress in building a very special mini keyboard. ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:0:0","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"About What is this? A three key keyboard, just like the one you use to type. The primary goal of this keyboard is to achieve the lowest input latency I possibly can using standard Cherry MX switches. Why only three keys? I personally only need 2-3 keys to make good use of this keyboard in the rhythm game I play, osu! It should be possible to scale the design up to a full size keyboard, but would take longer and cost much more. This serial keyboard project was based off of work I did last year on a very similar project. The major difference is that this keyboard communicates with the PC, or host, using RS232. My previous project used PS/2; if you are interested, a great resource for the PS/2 protocol is available here. ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:1:0","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Circuitry My first step in designing the circuit for my keyboard was to pick a CAD program. There are many free and commercial programs available for this purpose, but the ones I’m most familiar with are KiCAD and EAGLE. KiCAD has great support for hierarchical sheets and it’s free so I went with that. At first, I designed the circuit without using hierarchical sheets but later added them since I had extra time. Here are some before and after pics of the full circuit! Designing the circuit without hierarchical sheets The completed circuit, using hierarchical sheets for sub circuits There were a few new features I wanted to include in my serial mini keyboard which required me make good use of Google. The biggest feature I wanted to add was bootloader support. What's a bootloader? Basically, a bootloader is an onchip program that handles loading a target application. This allows convenient firmware updates over USB, as the bootloader can communicate with a PC host application to change the on-keyboard firmware. The microprocessor I chose for my keyboard, a 16-bit dsPIC, was a mostly arbitrary pick…I had many leftover from my previous projects. The main thing to note is that this microprocessor includes 3 on-chip UARTs. These are devices used for serial communication, the whole purpose of the serial keyboard. I decided to use one on-chip UART device to communicate with the PC for firmware updates, and another UART to send keystrokes. ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:0","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"USB-to-UART To receive and send USB data for keyboard firmware updates, I used the FT230XQ USB-to-UART IC. The finished circuit for USB communication was pretty straightforward, I just used the suggested circuit from the datasheet with an added LED status indicator and additional ESD protection. The completed USB-UART circuit ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:1","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"RGB Backlighting The next new feature I attempted to implement was adjustable RGB backlighting. The first step in designing this circuit was to refresh my understanding of transistors. It took a bit of time, but I ended up using IRLML2060 N-MOSFETs for each color. This transistor is operable with TTL logic levels and has a short enough time delay to drive the LEDs with PWM. I added two potentiometers as well; one to control the hue of the LEDs, and one to control the brightness. I had a tough time deciding on LEDs but ended up using these fairly bright ones. The completed backlighting circuit ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:2","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"RS232 Converter While the on-chip UART devices allow for easy serial communication between TTL logic levels (typically around 3.3V), serial communication with a PC’s serial port requires voltage levels which swing from ~$\\pm$12V. The famous MAX232 IC takes care of this conversion, and I once again used the preexisting example circuit with no modifications needed. The RS232 conversion circuit ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:3","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Debouncing This circuit is responsible for attempting to reduce the largest source of keyboard latency for Cherry MX switches, switch bouncing. On debouncing: “When the contacts of any mechanical switch bang together they rebound a bit before settling, causing bounce. Debouncing, of course, is the process of removing the bounces, of converting the brutish realities of the analog world into pristine ones and zeros. Both hardware and software solutions exist, though by far the most common are those done in a snippet of code.” Jack Ganssle My goal with this circuit was to use hysteresis to reduce/eliminate logic changes due to switch bouncing. My previous project attempted to use hysteresis, but was flawed because of incorrect RC values and an incorrect hysteresis circuit. The updated circuit should behave as expected although I have yet to test it, and it was mostly taken from this simple hysteresis circuit. I adjusted the debounce time here to 0.1 ms versus the recommended 5 ms time for Cherry switches…we’ll see how that goes. The circuit responsible for the bulk of debouncing ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:4","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Power and Oscillator These circuits are pretty unexciting and take care of the basics of providing 3.3V to the ICs and 100MHz to the microcontroller. After playing around with MPLAB Code Configurator, however, I think I might have misinterpreted how the microcontroller should be run at 100MHz. My initial assumption was that the microcontroller would play fine with a 100MHz external clock, but as shown in the below picture the max frequency for an external clock is 64MHz. The apparent solution to this would be to use a clock source with a PLL; an example is show in the second figure using the internal FRC clock. So I will probably need to use the internal FRC clock for this one. The maximum external clock frequency... FRC with PLL can provide the expected 100MHz ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:5","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"},{"categories":["Serial Keyboard"],"content":"Complete PCB So here is the completed PCB! I skipped a few steps to get to this point, but hopefully in another post I can talk about the obstacles and decisions I made while designing the PCB. Top of PCB Bottom of PCB ","date":"2020-08-23","objectID":"/2020/08/designing-a-serial-keyboard/:2:6","tags":["serial","keyboard","low-latency","pcb","design"],"title":"Designing a Serial Keyboard Circuit","uri":"/2020/08/designing-a-serial-keyboard/"}]